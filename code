/* Complete the Binary Search Tree program below that satisfy the given problem specification and output. Look for the functions with //TODO 
USER INPUT for the SEARCH, and USER INPUT for the REMOVE

*/
 #include <iostream>
using namespace std;

class Node {
public:
    int key;
    Node* left;
    Node* right;

    Node(int key) {
        this->key = key;
        this->left = NULL;
        this->right = NULL;
    }
};

class BST {
private:
    Node* root;

    void insertNode(Node*& node, int key) {
        if (node == NULL) {
            node = new Node(key);
            return;
        }

        if (key < node->key) {
            insertNode(node->left, key);
        } else if (key > node->key) {
            insertNode(node->right, key);
        }
    }

    Node* searchNode(Node* node, int key) {
        // TODO: Search for the key in the BST
        if (node == NULL || node->key == key) {
            return node;
        }

        if (key < node->key) {
            return searchNode(node->left, key);
        } else {
            return searchNode(node->right, key);
        }
    }

    Node* findMin(Node* node) {
        while (node->left != NULL) {
            node = node->left;
        }

        return node;
    }

    Node* deleteNode(Node*& node, int key) {
        if (node == NULL) {
            return node;
        }

        if (key < node->key) {
            node->left = deleteNode(node->left, key);
        } else if (key > node->key) {
            node->right = deleteNode(node->right, key);
        } else {
            if (node->left == NULL) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == NULL) {
                Node* temp = node->left;
                delete node;
                return temp;
            }

            Node* temp = findMin(node->right);
            node->key = temp->key;
            node->right = deleteNode(node->right, temp->key);
        }

        return node;
    }

    void inorderTraversal(Node* node) {
        // TODO: Print the keys in Inorder
        if (node != NULL) {
            inorderTraversal(node->left);
            cout << node->key << " ";
            inorderTraversal(node->right);
        }
    }

    void preorderTraversal(Node* node) {
        // TODO: Print the keys in Preorder
        if (node != NULL) {
            cout << node->key << " ";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }

    void postorderTraversal(Node* node) {
        // TODO: Print the keys in Postorder
        if (node != NULL) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            cout << node->key << " ";
        }
    }

    void displayBST(Node* node, int space) {
        if (node == NULL) {
            return;
        }

        space += 5;
        displayBST(node->right, space);

        cout << endl;
        for (int i = 5; i < space; i++) {
            cout << " ";
        }
        cout << node->key << "\n";

        displayBST(node->left, space);
    }

public:
    BST() {
        this->root = NULL;
    }

    void insert(int key) {
        insertNode(this->root, key);
    }

    Node* search(int key) {
        return searchNode(this->root, key);
    }

    void remove(int key) {
        deleteNode(this->root, key);
    }

    void inorder() {
        inorderTraversal(this->root);
        cout << endl;
    }

    void preorder() {
        preorderTraversal(this->root);
        cout << endl;
    }

    void postorder() {
        postorderTraversal(this->root);
        cout << endl;
    }

    void display() {
        displayBST(this->root, 0);
    }
};

int main() {
    BST bst;
    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    cout << "Inorder traversal: ";
    bst.inorder();

    cout << "Preorder traversal: ";
    bst.preorder();

    cout << "Postorder traversal: ";
    bst.postorder();

    cout << "Displaying BST:\n";
    bst.display();

    // USER INPUT for SEARCH
    int searchKey;
    cout << "\nEnter key to search: ";
    cin >> searchKey;

    Node* searchedNode = bst.search(searchKey);
    if (searchedNode == NULL) {
        cout << "Node not found in the BST\n";
    } else {
        cout << "Node found in the BST: " << searchedNode->key << endl;
    }

    // USER INPUT for REMOVE
    int removeKey;
    cout << "\nEnter key to remove: ";
    cin >> removeKey;

    bst.remove(removeKey);

    cout << "Inorder traversal after deleting a node: ";
    bst.inorder();

    return 0;
}
